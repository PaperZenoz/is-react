{"version":3,"sources":["components/MainPage/SortButton/SortButton.tsx","components/MainPage/CardList/CardList.tsx","redux/actions.ts","redux/types.ts","components/MainPage/MainPage.tsx","common/Preloader.tsx","components/SelectedFilm/SelectedCharacter/SelectedCharacter.tsx","components/SelectedFilm/SelectedFilmInfo/SelectedFilmInfo.tsx","components/SelectedFilm/SelectedFilm.tsx","App.tsx","serviceWorker.js","redux/appReducer.ts","redux/mainPageReducer.ts","redux/selectedFilmReducer.ts","redux/rootReducer.tsx","index.js","assets/img/cardImg.jpg","assets/img/preloader.svg"],"names":["SortBurron","sortValue","setSortValue","dispatch","useDispatch","type","className","onClick","CardList","movieList","setFilmSelected","setSelectedFilmInfo","sort","a","b","release_date","replace","sortFunc","map","film","key","episode_id","src","CardImg","alt","title","setLoading","payload","setCharacterLoading","setCharacterWasSelected","connect","state","app","main","SortButton","Preloader","preloader","SelectedCharacter","selectedCharacter","name","gender","birth_year","SelectedFilmInfo","selectedFilmInfo","selectedCharacterThunk","director","characters","character","index","selectedFilm","characterLoading","characterWasSelected","fetch","then","response","json","setSelectedCharacter","loading","filmSelected","setMovieListThunk","cards","results","useEffect","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","__store__","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.5664689d.chunk.js","sourcesContent":["import React from 'react'\nimport {useDispatch} from \"react-redux\";\n\ntype Props = {\n    sortValue: boolean\n    setSortValue: (payload : boolean) => void\n}\n\n\nlet SortBurron: React.FC<Props> = ({sortValue, setSortValue}) => {\n    const dispatch = useDispatch()\n\n    const handlerSortButton = () => {\n        const newValue = sortValue ? false : true\n        dispatch(setSortValue(newValue))\n    }\n\n    return (\n        <button type=\"button\" className=\"btn btn-secondary btn-lg btn-block mt-4\" onClick={handlerSortButton}>Показать\n            сначала {sortValue ? 'старые' : 'новые'}</button>\n    )\n}\n\nexport default SortBurron\n\n\n\n\n\n\n","import React from 'react'\nimport CardImg from '../../../assets/img/cardImg.jpg'\n\n\ntype Props = {\n    movieList: any\n    sortValue: boolean\n    setFilmSelected: (payload : boolean) => void\n    setSelectedFilmInfo: (payload : any) => void\n}\n\n\n// Создаем картотеку фильма\nlet CardList: React.FC<Props> = ({movieList, sortValue, setFilmSelected, setSelectedFilmInfo}) => {\n\n    const handlerOnClick = (payload: any) => {\n        setSelectedFilmInfo(payload)\n        setFilmSelected(true)\n    }\n\n\n    // Сортируем картотеку по дате в зависимости от значения устанавливаемого кнопкой сортировки\n    const sortFunc = (a: any, b: any) => sortValue ? b.release_date.replace(/-/g, '') - a.release_date.replace(/-/g, '') : a.release_date.replace(/-/g, '') - b.release_date.replace(/-/g, '')\n\n    return (\n\n        // Создаем картотеку на основании приходящего массива фильмов из swapi\n        <div className=\"d-flex justify-content-between flex-wrap mt-5\">\n            {movieList.sort((a: any, b: any) => sortFunc(a, b)\n            ).map((film: any) =>\n                <div className=\"card card-wrap\" key={film.episode_id} onClick={() => handlerOnClick(film)}>\n                    <img src={CardImg} className=\"card-img-top\" alt={film.title}/>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title font-weight-bold\">Episode {film.episode_id}: {film.title}</h5>\n                        <p className=\"card-text\">Дата выхода: {film.release_date}</p>\n                    </div>\n                </div>\n            )}\n        </div>\n\n    )\n}\n\n\nexport default CardList","import {\n    SET_SELECTED_CHARACTER, SET_FILM_SELECTED, SET_LOADING, SET_MOVIE_LIST, SET_SELECTED_FILM_INFO,\n    SET_SORT_VALUE, SET_CHARACTER_LOADING, SET_CHARACTER_WAS_SELECTED\n} from \"./types\";\n\n\n\ntype SetMovieListActionType = { type : typeof SET_MOVIE_LIST, payload : any }\nexport const setMovieList = (payload : any): SetMovieListActionType => ({type: SET_MOVIE_LIST, payload})\n\ntype SetLoadingActionType = { type : typeof SET_LOADING, payload : boolean }\nexport const setLoading = (payload : boolean): SetLoadingActionType => ({type: SET_LOADING, payload})\n\ntype SetSortValueActionType = { type : typeof SET_SORT_VALUE, payload : boolean }\nexport const setSortValue = (payload : boolean): SetSortValueActionType => ({type: SET_SORT_VALUE, payload})\n\ntype SetFilmSelectedActionType = { type : typeof SET_FILM_SELECTED, payload : boolean }\nexport const setFilmSelected = (payload : boolean): SetFilmSelectedActionType => ({type: SET_FILM_SELECTED, payload})\n\ntype SetSelectedFilmInfoActionType = { type : typeof SET_SELECTED_FILM_INFO, payload : any }\nexport const setSelectedFilmInfo = (payload : any): SetSelectedFilmInfoActionType => ({type : SET_SELECTED_FILM_INFO, payload})\n\ntype SetSelectedCharacterActionType = { type : typeof SET_SELECTED_CHARACTER, payload : any }\nexport const setSelectedCharacter = (payload : any): SetSelectedCharacterActionType => ({type: SET_SELECTED_CHARACTER, payload})\n\n\ntype SetCharacterLoadingActionType = { type : typeof SET_CHARACTER_LOADING, payload : boolean }\nexport const setCharacterLoading = (payload : boolean): SetCharacterLoadingActionType => ({ type: SET_CHARACTER_LOADING, payload})\n\n\ntype SetCharacterWasSelectedActionType = { type : typeof SET_CHARACTER_WAS_SELECTED, payload : boolean }\n\nexport const setCharacterWasSelected = (payload : boolean): SetCharacterWasSelectedActionType => ({type: SET_CHARACTER_WAS_SELECTED, payload})\n\n\n\n\nexport const setMovieListThunk = () => (dispatch : any) =>{\n    dispatch(setLoading(true))\n    fetch('https://swapi.dev/api/films/?format=json').then(response => response.json()).then(cards => {\n        dispatch(setMovieList(cards.results))\n        dispatch(setLoading(false))\n    })\n}\n\nexport const selectedCharacterThunk = (payload : string) => (dispatch : any) => {\n    dispatch(setCharacterWasSelected(true))\n    dispatch(setCharacterLoading(false))\n    fetch(payload).then(response => response.json()).then(character => {\n        dispatch(setSelectedCharacter(character))\n        dispatch(setCharacterLoading(true))\n    })\n}\n\n","export const SET_MOVIE_LIST = 'APP/SET_MOVIE_LIST'\nexport const SET_LOADING = 'APP/LOADING'\nexport const SET_SORT_VALUE = 'APP/SET_SORT_VALUE'\nexport const SET_FILM_SELECTED = 'SET_FILM_SELECTED'\nexport const SET_SELECTED_FILM_INFO = 'SET_SELECTED_FILM_INFO'\nexport const SET_SELECTED_CHARACTER = 'SET_SELECTED_CHARACTER'\nexport const SET_CHARACTER_LOADING = 'SET_CHARACTER_LOADING'\nexport const SET_CHARACTER_WAS_SELECTED = 'SET_CHARACTER_WAS_SELECTED'","import React from 'react'\nimport SortButton from \"./SortButton/SortButton\";\nimport CardList from \"./CardList/CardList\";\nimport {setFilmSelected, setSelectedFilmInfo, setSortValue} from \"../../redux/actions\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/rootReducer\";\n\n\ntype Props = {\n    movieList: any\n    sortValue: boolean\n    setSortValue: (payload : boolean) => void\n    setFilmSelected: (payload : boolean) => void\n    setSelectedFilmInfo: (payload : any) => void\n}\n\n\nconst MainPage: React.FC<Props> = ({movieList, sortValue, setSortValue, setFilmSelected, setSelectedFilmInfo}) => {\n\n    return (\n        <>\n        <SortButton sortValue={sortValue} setSortValue={setSortValue}/>\n        <CardList movieList={movieList} sortValue={sortValue} setFilmSelected={setFilmSelected} setSelectedFilmInfo={setSelectedFilmInfo}/>\n        </>\n    )\n\n}\n\nconst mapStateToProps = (state: AppStateType)=> {\n    return {\n        movieList: state.app.movieList,\n        sortValue: state.main.sortValue,\n    }\n}\n\nexport default connect(mapStateToProps, { setSortValue, setFilmSelected, setSelectedFilmInfo})(MainPage)","import React from 'react';\nimport preloader from '../assets/img/preloader.svg'\n\n\n\n\n const Preloader: React.FC = () => {\n\n    return <div className=\"preloaderWrap\"><img src={preloader} className=\"preloader\" alt=\"preloader\"/></div>\n\n}\n\nexport default Preloader","import React from 'react'\n\n\ntype Props = {\n    selectedCharacter: any\n    setCharacterWasSelected: (payload : boolean) => void\n}\n\nconst SelectedCharacter: React.FC<Props> = ({selectedCharacter, setCharacterWasSelected}) =>  {\n\n    const handlerReturnButton = () => {\n        setCharacterWasSelected(false)\n    }\n\n    return (\n        <div className=\"card mt-5\">\n            <div className=\"card-body\">\n                <button type=\"button\" className=\"btn btn-secondary mb-3\"  onClick={handlerReturnButton}>Вернуться на страницу с фильмом</button>\n                <h5 className=\"card-title mb-5 font-weight-bold\">Имя персонажа: {selectedCharacter.name}</h5>\n                <p className=\"card-text\"><strong>Пол:</strong> {selectedCharacter.gender}</p>\n                <p className=\"card-text\"><strong>Год рождения: {selectedCharacter.birth_year}</strong> </p>\n            </div>\n        </div>\n\n    )\n}\n\n\nexport default SelectedCharacter","import React from 'react'\n\n\n\n\ntype Props = {\n    selectedFilmInfo: null | any\n    setFilmSelected: (payload : boolean) => void\n    selectedCharacterThunk: any\n}\n\nconst SelectedFilmInfo: React.FC<Props> = ({selectedFilmInfo, setFilmSelected, selectedCharacterThunk}) => {\n\n    const handlerReturnButton = () => {\n        setFilmSelected(false)\n    }\n\n    const handlerCharacter = (payload: string) => {\n        selectedCharacterThunk(payload)\n    }\n\n    return (\n        <div className=\"card mt-5\">\n            <div className=\"card-body\">\n                <button type=\"button\" className=\"btn btn-secondary mb-3\" onClick={handlerReturnButton}>Вернуться на главную\n                </button>\n                <h5 className=\"card-title mb-5 font-weight-bold\">\n                    Episode {selectedFilmInfo.episode_id}: {selectedFilmInfo.title}</h5>\n                <p className=\"card-text\"><strong>Имя режисёра:</strong> {selectedFilmInfo.director} </p>\n                <p className=\"card-text\"><strong>Дата выпуска:</strong> {selectedFilmInfo.release_date} </p>\n                <p className=\"card-text\"><strong className=\"mb-3 d-block\">Список персонажей:</strong></p>\n                {selectedFilmInfo.characters.map((character: string, index: number) => <p key={index}\n                                                                          className=\"card__ancor\" onClick={() => handlerCharacter(character)}>{character}</p>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default SelectedFilmInfo","import React from 'react'\nimport SelectedCharacter from \"./SelectedCharacter/SelectedCharacter\";\nimport Preloader from \"../../common/Preloader\";\nimport SelectedFilmInfo from \"./SelectedFilmInfo/SelectedFilmInfo\";\nimport {connect} from \"react-redux\";\nimport {setFilmSelected, selectedCharacterThunk, setCharacterWasSelected} from \"../../redux/actions\";\nimport {AppStateType} from \"../../redux/rootReducer\";\n\n\ntype Props = {\n    selectedFilmInfo: null | any\n    characterLoading: boolean\n    selectedCharacterThunk: any\n    setFilmSelected: (payload : boolean) => void\n\n    characterWasSelected: boolean\n    selectedCharacter: any\n    setCharacterWasSelected: (payload : boolean) => void\n\n}\n\n\n\nconst SelectedFilm: React.FC<Props> = ({selectedFilmInfo, selectedCharacter, characterLoading, characterWasSelected, setCharacterWasSelected, selectedCharacterThunk, setFilmSelected}) => {\n\n    return (\n        <>\n        {characterWasSelected ? (characterLoading ? <SelectedCharacter selectedCharacter={selectedCharacter} setCharacterWasSelected={setCharacterWasSelected}/> :  <Preloader/>) : <SelectedFilmInfo selectedFilmInfo={selectedFilmInfo} setFilmSelected={setFilmSelected} selectedCharacterThunk={selectedCharacterThunk} />}\n\n        </>\n    )\n}\n\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        selectedFilmInfo: state.selectedFilm.selectedFilmInfo,\n        selectedCharacter: state.selectedFilm.selectedCharacter,\n        characterLoading: state.selectedFilm.characterLoading,\n        characterWasSelected: state.selectedFilm.characterWasSelected\n    }\n}\n\n\nexport default connect(mapStateToProps, {setFilmSelected, selectedCharacterThunk, setCharacterWasSelected})(SelectedFilm)","import React, {useEffect} from 'react';\nimport MainPage from \"./components/MainPage/MainPage\";\nimport Preloader from \"./common/Preloader\";\nimport {connect} from \"react-redux\";\nimport {setMovieListThunk} from \"./redux/actions\";\nimport SelectedFilm from \"./components/SelectedFilm/SelectedFilm\";\nimport {AppStateType} from './redux/rootReducer';\n\n\ntype Props = {\n    loading: boolean\n    filmSelected: boolean\n    setMovieListThunk: any\n}\n\nlet App: React.FC<Props> = ({loading, filmSelected, setMovieListThunk}) => {\n\n    useEffect(() => {\n        setMovieListThunk()\n    }, [])\n\n\n    return (\n        <div className=\"app container mt-5 mb-5\">\n            <h1 className=\"text-center font-weight-bolder\">Star Wars</h1>\n            {loading ? <Preloader/> : (filmSelected ? <SelectedFilm/> : <MainPage/>)}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state : AppStateType) => {\n    return {\n        loading: state.app.loading,\n        filmSelected: state.app.filmSelected\n    }\n}\n\nexport default connect(mapStateToProps, {setMovieListThunk})(App)\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {SET_FILM_SELECTED, SET_LOADING, SET_MOVIE_LIST} from \"./types\";\n\n\n\n\nconst initialState = {\n    movieList: null as null | any,\n    loading: true,\n    filmSelected: false\n}\n\nexport type InitialStateType = typeof initialState\n\n\nexport const appReducer = (state = initialState, action : any): InitialStateType => {\n    switch (action.type) {\n        case SET_MOVIE_LIST:\n            return {...state, movieList: action.payload}\n        case SET_LOADING:\n            return {...state, loading: action.payload}\n        case SET_FILM_SELECTED:\n            return {...state, filmSelected: action.payload}\n\n        default:\n            return state\n    }\n}"," import {SET_SORT_VALUE} from \"./types\";\n\n export type InitialStateType = {\n     sortValue : boolean\n }\n\n const initialState: InitialStateType = {\n     sortValue: true,\n }\n\n export const mainPageReducer = (state = initialState, action: any): InitialStateType => {\n     switch (action.type) {\n         case SET_SORT_VALUE:\n             return {...state, sortValue: action.payload}\n         default:\n             return state\n     }\n }","import {\n    SET_CHARACTER_LOADING, SET_CHARACTER_WAS_SELECTED, SET_SELECTED_CHARACTER,\n    SET_SELECTED_FILM_INFO\n} from \"./types\";\n\nconst initialState = {\n    selectedFilmInfo: null as null | any,\n    selectedCharacter: null as null | any,\n    characterLoading: false,\n    characterWasSelected: false\n}\n\nexport type InitialStateType = typeof initialState\n\n\nexport const selectedFilmReducer = (state = initialState, action: any): InitialStateType => {\n    switch (action.type) {\n        case SET_SELECTED_FILM_INFO:\n            return {...state, selectedFilmInfo: action.payload}\n        case SET_SELECTED_CHARACTER:\n            return {...state, selectedCharacter: action.payload}\n        case SET_CHARACTER_LOADING:\n            return {...state, characterLoading: action.payload}\n        case SET_CHARACTER_WAS_SELECTED:\n            return {...state, characterWasSelected: action.payload}\n\n\n        default:\n            return state\n    }\n\n\n}","import {combineReducers} from \"redux\";\nimport {appReducer} from \"./appReducer\";\nimport {mainPageReducer} from \"./mainPageReducer\";\nimport {selectedFilmReducer} from \"./selectedFilmReducer\";\n\nexport const rootReducer = combineReducers({\n    app: appReducer,\n    main: mainPageReducer,\n    selectedFilm: selectedFilmReducer\n})\n\n\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {applyMiddleware, compose, createStore} from \"redux\";\nimport {rootReducer} from \"./redux/rootReducer\";\nimport {Provider} from \"react-redux\";\nimport thunkMiddleWare from \"redux-thunk\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleWare)));\nwindow.__store__ = store\n\n\nconst app = (\n    <Provider store={store}>\n        <App/>\n    </Provider>\n)\n\nrender(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cardImg.86001298.jpg\";","module.exports = __webpack_public_path__ + \"static/media/preloader.89647c79.svg\";"],"sourceRoot":""}